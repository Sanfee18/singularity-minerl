BootStrap: docker
From: nvcr.io/nvidia/cudagl:11.4.2-runtime-ubuntu20.04

%post
    # Supress interactive menu while installing keyboard-configuration
    export DEBIAN_FRONTEND=noninteractive
    # Temporary fix for NVIDIA container repository
    apt-get clean && \
    apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/$(cat /etc/os-release | grep '^ID=' | awk -F'=' '{print $2}')$(cat /etc/os-release | grep '^VERSION_ID=' | awk -F'=' '{print $2}' | sed 's/[^0-9]*//g')/x86_64/3bf863cc.pub" && \
    rm -rf /var/lib/apt/lists/*

    # Install locales to prevent errors
    apt-get clean && \
    apt-get update && apt-get install --no-install-recommends -y locales && \
    rm -rf /var/lib/apt/lists/* && \
    locale-gen en_US.UTF-8

    # Install Xvfb, Xfce Desktop, and others
    dpkg --add-architecture i386 && \
    apt-get update && apt-get install --no-install-recommends -y \
        software-properties-common \
        apt-transport-https \
        apt-utils \
        build-essential \
        ca-certificates \
        cups-filters \
        cups-common \
        cups-pdf \
        curl \
        file \
        wget \
        bzip2 \
        gzip \
        p7zip-full \
        xz-utils \
        zip \
        unzip \
        zstd \
        gcc \
        git \
        jq \
        make \
        python \
        python-numpy \
        python3 \
        python3-cups \
        python3-numpy \
        mlocate \
        nano \
        vim \
        htop \
        xarchiver \
        brltty \
        brltty-x11 \
        desktop-file-utils \
        gucharmap \
        mpd \
        onboard \
        orage \
        parole \
        policykit-desktop-privileges \
        libpulse0 \
        pavucontrol \
        ristretto \
        supervisor \
        thunar \
        thunar-volman \
        thunar-archive-plugin \
        thunar-media-tags-plugin \
        net-tools \
        libgtk-3-bin \
        vainfo \
        vdpauinfo \
        mesa-utils \
        mesa-utils-extra \
        dbus-x11 \
        libdbus-c++-1-0v5 \
        dmz-cursor-theme \
        numlockx \
        xcursor-themes \
        xvfb \
        xfburn \
        libvulkan1 \
        vulkan-utils &&\
    apt-get install -y libreoffice && \
    # Support libva and VA-API through NVIDIA VDPAU
    curl -fsSL -o /tmp/vdpau-va-driver.deb "https://launchpad.net/~saiarcot895/+archive/ubuntu/chromium-dev/+files/vdpau-va-driver_0.7.4-6ubuntu2~ppa1~18.04.1_amd64.deb" && apt-get install --no-install-recommends -y /tmp/vdpau-va-driver.deb

    # Install VirtualGL and make libraries available for preload
    VIRTUALGL_VERSION=3.1
    VIRTUALGL_URL="https://sourceforge.net/projects/virtualgl/files"

    curl -fsSL -O "${VIRTUALGL_URL}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb"
    curl -fsSL -O "${VIRTUALGL_URL}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb"
    apt-get update
    apt-get install -y --no-install-recommends ./virtualgl_${VIRTUALGL_VERSION}_amd64.deb ./virtualgl32_${VIRTUALGL_VERSION}_amd64.deb
    rm -f "virtualgl_${VIRTUALGL_VERSION}_amd64.deb" "virtualgl32_${VIRTUALGL_VERSION}_amd64.deb"
    chmod u+s /usr/lib/libvglfaker.so
    chmod u+s /usr/lib/libdlfaker.so
    chmod u+s /usr/lib32/libvglfaker.so
    chmod u+s /usr/lib32/libdlfaker.so
    chmod u+s /usr/lib/i386-linux-gnu/libvglfaker.so
    chmod u+s /usr/lib/i386-linux-gnu/libdlfaker.so

    # Install Python application, and web application
    apt-get update && apt-get install --no-install-recommends -y \
        build-essential \
        python3 \
        python3-pip \
        python3-dev \
        python3-gi \
        python3-setuptools \
        python3-wheel \
        tzdata \
        sudo \
        udev \
        xclip \
        x11-utils \
        xdotool \
        wmctrl \
        jq \
	    gdebi-core \
        x11-xserver-utils \
        xserver-xorg-core \
        libopus0 \
        libgdk-pixbuf2.0-0 \
        libsrtp2-1 \
        libxdamage1 \
        libxml2-dev \
        libcairo-gobject2 \
        libpulse0 \
        libpangocairo-1.0-0 \
        libgirepository1.0-dev \
        libjpeg-dev \
        zlib1g-dev \
	    netcat \
	    iproute2 &&\

    apt-get update && apt-get install --no-install-recommends -y iputils-ping openssh-client x264 &&\
    rm -rf /var/lib/apt/lists/*

    # Java JDK 1.8
    apt update -y && apt install -y software-properties-common && \
    add-apt-repository ppa:openjdk-r/ppa && apt update -y && \
    apt install -y openjdk-8-jdk && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

    # Check Java version
    JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')

    # Install Miniconda
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
    bash /tmp/miniconda.sh -b -p /opt/conda
    rm /tmp/miniconda.sh

    # Add Miniconda to PATH
    export PATH="/opt/conda/bin:$PATH"

    # Create a new conda environment with Python
    conda create -y --name minerl python=3.8

    # Activate the environment and install libraries
    . /opt/conda/etc/profile.d/conda.sh
    conda activate minerl
    conda install -y git
    conda install -c "nvidia/label/cuda-11.4.2" cuda-toolkit
    conda install -c anaconda cudnn

    # Python libraries
    /opt/conda/envs/minerl/bin/pip install -U pip
    /opt/conda/envs/minerl/bin/pip install pyyaml
    /opt/conda/envs/minerl/bin/pip install git+https://github.com/minerllabs/minerl
    /opt/conda/envs/minerl/bin/pip install stable-baselines3[extra] wandb

    # Create a needed directory for bind flag
    mkdir -p /path/to/code/folder/


%environment
    TZ=UTC
    REFRESH=60
    PASSWD=mypasswd
    NOVNC_ENABLE=false
    WEBRTC_ENCODER=nvh264enc
    WEBRTC_ENABLE_RESIZE=false
    ENABLE_AUDIO=false
    ENABLE_BASIC_AUTH=true
    LANG=en_US.UTF-8
    LANGUAGE=en_US:en
    LC_ALL=en_US.UTF-8
    DISPLAY=:0
    VGL_REFRESHRATE=60
    VGL_ISACTIVE=1
    VGL_DISPLAY=egl
    VGL_WM=1
    NVIDIA_DRIVER_CAPABILITIES=all
    PULSE_SERVER=127.0.0.1:4713
    CONDA_DIR=/opt/conda
    export PATH="/opt/conda/bin:$PATH"
    . /opt/conda/etc/profile.d/conda.sh
    conda activate minerl
